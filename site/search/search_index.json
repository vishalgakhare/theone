{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Application and System Design with AWS cloud, lead teams to develop well-managed platforms. (Serverless Apps in JS, TS) - Developed multiple serverless apps and utilities for the telephony system to interact with Amazon Lex. Re-designed and developed a softphone application. 2018 (Java, NodeJS, Bash Script, Mongo DB) - Worked on Java Spark and NodeJS batches to tokenize ~50M accounts and migrate ~250M records. 2016 (NodeJS, MongoDB) - Designed and developed Rest Api services backed with Mongo DB. The Rest services serviced 2M requests per day at an average of 20ms response time. 2012 (C#.Net, VS2010)- Worked on CTIBHO (Computer Telephony Interface) to support Avaya Dialer upgrade to version 5. The project won the Enterprise Circle of Excellence award. 2008 (C#.Net, VS2008)- Worked on Wells Fargo + Wachovia merger project to optimize/tune the performance of the application and the Oracle database queries. The performance improved by 50% for Oracle DB and by 90 % for applications. 2006 (C#.Net, VS2005) - Developed a Verizon One Source search module single-handedly on all the waterfall phases and delivered it with zero bugs.","title":"Home"},{"location":"Docker/","text":"Docker Commands docker logs <container_id> docker stats <container_id> : If you just need to keep an eye on the metrics of your container to work out what\u2019s gone wrong, docker stats can help: it\u2019ll give you a live stream of resource usage, so you can see just how much memory you\u2019ve leaked so far. docker cp <container_id> : /path/to/useful/file/local-path Often just getting hold of more log files is enough to sort you out. If you already know what you want, docker cp has your back: copy any file from any container back out onto your local machine, so you can examine it in depth (especially useful analysing heap dumps)._ docker exec -it <container_id> /bin/bash : Next up, if you can run the container (if it\u2019s crashed, you can restart it with docker start ), shell in directly and start digging around for further details by hand. docker commit <container_id> my-broken-container && docker run -it my-broken-container /bin/bash","title":"Docker"},{"location":"Docker/#docker-commands","text":"docker logs <container_id> docker stats <container_id> : If you just need to keep an eye on the metrics of your container to work out what\u2019s gone wrong, docker stats can help: it\u2019ll give you a live stream of resource usage, so you can see just how much memory you\u2019ve leaked so far. docker cp <container_id> : /path/to/useful/file/local-path Often just getting hold of more log files is enough to sort you out. If you already know what you want, docker cp has your back: copy any file from any container back out onto your local machine, so you can examine it in depth (especially useful analysing heap dumps)._ docker exec -it <container_id> /bin/bash : Next up, if you can run the container (if it\u2019s crashed, you can restart it with docker start ), shell in directly and start digging around for further details by hand. docker commit <container_id> my-broken-container && docker run -it my-broken-container /bin/bash","title":"Docker Commands"},{"location":"AWS/Cheatsheet/","text":"","title":"Cheatsheet"},{"location":"Books/The%20Effective%20Engineer/","text":"Effective Engineer - Notes By Edmond Lau Highly Recommended :+1: http://www.theeffectiveengineer.com/ What's an Effective Engineer? They are the people who get things done. Effective Engineers produce results. Adopt the Right Mindsets Focus on High Leverage Activities Leverage = Impact Produced / Time Invested Use Leverage as Your Yardstick for Effectiveness 80% of the impact comes from 20% of the work. Focus on high leverage and not just easy wins. Optimize for Learning Change jobs if you have to. Optimizing for learning is high leverage. Adopt a growth mindset. Talk to people. Become good at telling stories. It gets better with time. Those with a growth mindset believe that they can cultivate and grow their intelligence and skills through effort. Own your story. Invest in the rate of learning Learning compounds. Compounding leads to exponential growth. Earlier the compounding starts, the better. Working on unchallenging tasks is a huge opportunity cost. You missed out on compounded learning. Prioritize learning over profitability. Invest your time in activities with the highest learning rate. Seek Work Environments Conducive to Learning Fast Growth: Companies where #problems >> #resources. Opportunity to choose high impact work. Make sure you are working on high priority projects. Openness: Look for culture with curiosity, where everyone is encouraged to ask questions. Fast Paced. People smarter than you. Autonomy: Freedom to choose what to work on. Smaller companies => More autonomy. While on Job Make a daily habit of acquiring new skills. Read code written by brilliant engineers. Jump fearlessly into code you don't know. Always be learning. Invest in skills that are in high demand. Read Books. Attend Conferences. Build and maintain strong relationships. Prioritize Regularly Opportunity cost of working on wrong ideas can set back growth by years. Prioritize tasks based on ROI. Regular prioritization is high leverage activity. On TODO Lists: Maintain a 'single' todo lists where all tasks are listed. Don't try to remember stuff. Brain is bad at remembering. It's rather good at processing. Ask yourself regularly: Is this the most important thing I should be working on? Focus on what directly produces value. Learn to say no. Focus on the important and non-urgent. Find ways to get into flow. \u201cA state of effortless concentration so deep that they lose their sense of time, of themselves, of their problems.\u201d When possible, preserve larger blocks of focused time in your schedule. Limit the amount of Work in Progress. Cost of context switching is high. Prioritizing is difficult. Prioritization is high leverage. It has huge impact on your ability to get right things done. Invest in Iteration Speed Continuous Deployment is high leverage. Will save a lot of time in manual deployment of code. They are the people who get things done. Effective Engineers produce results. Move fast to learn fast. Move fast and break things. Moving fast enables us to build more things and learn at faster rate. Invest in time saving tools. If you have to do something more than twice, write a tool the third time. Tools are multipliers that allow your to scale your impact beyond the confines of a day. Faster tools get used more often. Faster tools can enable new workflows that previously weren't possible. Productivity skyrockets with tools. Time saving property of tools also scale with team adoption. Shorten your debugging and validation Loops. Extra time spent in optimizing debugging workflow can help you fix annoying bugs with less headache. Debugging is hard. It's time consuming. Upfront investments to shorten debugging loops are worth it. High test coverage to reduce build and site breakages. Fast unit tests to encourage people to run them. Fast and incremental compiles and reloads to reduce development time. Master you programming environment. One editor. One high level language. Shell. Keyboard > Mouse. Automate manual workflows. Use interactive shell. Make running specific tests easy. Faster you can iterate, faster you can learn. Measure what you want to Improve Use metric to drive progress. If you can't measure it, you can't improve it. Good metric. Helps you focus on right things. Drives forward progress. Helps you guard against future regressions. Performance ratcheting : Any change should strictly improve the metric. Bad metric can lead to unwanted behavior. Examples: hours worked < productivity. click through rates < long click through rates. Metric you choose influences your decisions and behavior. Look for metric that, when optimized, maximizes impact for the team. Actionable metric - Whose movement can be casually explained by team's effort. Responsive metric - Updates quickly to give back feedback whether a given change was =ve or -ive. Choosing a metric is high leverage. Dedicate time to pick right metric. Instrument everything to understand what's going on. Measure anything, measure everything. Graphite, statsd. A single line of code lets you define a new counter or timer on the fly. Measuring goals you want to achieve is high leverage. Internalize useful numbers. Knowledge of useful numbers provide a valuable shortcut for knowing where to invest efforts to maximize gains. Need upfront work. Need not be accurate, ballpark idea suffices. Knowing useful numbers enables you to do back of the envelope calculations to quickly estimate the performance properties of a design without actually building it. Internalizing useful number help you spot anomalies. Be skeptical about data integrity. Log data liberally. Build tools to iterate on data accuracy sooner. Examine data sooner. When numbers look off, dig in to it sooner. :heavy_check_mark: Measure your progress. Carefully choose your top-level metric. Instrument your system. Know your numbers. Prioritize data integrity. Validate your ideas early and often. Not validating early leads to wasted efforts. Don't delay get feedback. Find low effort ways to validate work. Power of small batches. Helps you avoid making a big mistake by stopping the flow. Approach problem iteratively. No large implementations. Working solo? Be wary. Be extra vocal and get feedback. Improve project estimation skills. Beware of mythical man month. Communication overhead is significant. Reduce risk early. Rewrite projects - almost always fail. Additional hours hurt productivity. Causes burnout. Do the riskiest task first. Allow buffer room for the unknown. Balance Quality with Pragmatism High code quality. Code readability. Establish sustainable code review process. Code reviews help: Catch bugs and design problems early. Sharing working knowledge of the codebase. Increases long term agility. Easier to understand, quicker to modify. Manage complexity through Abstraction Example: MapReduce. Right abstractions make huge difference. \u201cPick the right ones, and programming will flow naturally from design; modules will have small and simple interfaces; and new functionality will more likely fit in without extensive reorganization,\u201d \u201cPick the wrong ones, and programming will be a series of nasty surprises: interfaces will become baroque and clumsy as they are forced to accommodate unanticipated interactions, and even the simplest of changes will be hard to make.\u201d The right abstraction can increase engineering productivity by an order of magnitude. Simple abstractions avoid interweaving multiple concepts, so that you can reason about them independently rather than being forced to consider them together. Designing good abstractions take work. An abstraction's usage and popularity provides a reasonable proxy for its quality. Automate Testing Unit test cases and some integration testing provide a scalable way of managing growing codebase. A suite of extensive and automated tests can reduce overall error rates by validating the quality and by safeguarding against regressions. Tests also allow engineers to make changes, especially large refactorings, with significantly higher confidence. Despite its benefits, it can be difficult to foster a culture of automated testing. Focus on high leverage tests. Writing more tests, creating a virtuous feedback cycle and saving more development time. Repay Technical Debt Technical debt refers to all the deferred work that\u2019s necessary to improve the health and quality of the codebase and that would slow us down if left unaddressed. Accumulating technical debt is fine as far as it is repaid within time. Refactor often. Reduce Operational Complexity Keep no. of technologies low. Don\u2019t sway towards shiny new technologies. Every additional technology you add is is guaranteed to go wrong eventually. Will need your time. Do the simple thing first. Embrace operational simplicity. The first solution that comes to mind is generally complex. Don't stop. Keep peeling off the layers of onion. Simplify the architecture to reduce their operational burden. \u201cWhat\u2019s the simplest solution that can get the job done while also reducing our future operational burden?\u201d Discipline to focus on simplicity is high leverage. Fail Fast Fail immediately and visibly. Doesn\u2019t necessarily mean crashing your programs for users. fail-fast to surface issues immediately. Failing fast is high leverage as it saves debugging time. Relentlessly Automate Automating mechanics is good. Automating decision making - no. Hone your ability to respond and recover quickly. Leverage recovering quickly > Leverage preventing failures. \u201cscript for success,\u201d practice failure scenarios, and work on our ability to recover quickly. Make batch process idempotent Make processes retryable, i.e., not leaving any global state. Invest in your team's Growth Invest in onboarding. The higher you climb up the engineering ladder, the more your effectiveness will be measured not by your individual contributions but by your impact on the people around you. \"You\u2019re a staff engineer if you\u2019re making a whole team better than it would be otherwise. You\u2019re a principal engineer if you\u2019re making the whole company better than it would be otherwise. And you\u2019re distinguished if you\u2019re improving the industry.\u201d \ufffc- Focus primarily on making everyone around you succeed. Your career depends on your team's success. Make hiring everyone's responsibility. Shared ownership of code. Keep bus factor more than one. Shared ownership removes isolated silos of information. Build collective wisdom through post mortems. Invest in automated testing. Automated test cases lead to higher confidence when refactoring. Write test cases when the code is fresh in mind. Don\u2019t be dogmatic about 100% code coverage. Value of tests increases over time and cost to write goes down. Hire the best. Surround yourself with great advisors \u2600\ufe0f : \u201cLeverage is the lens through which effective engineers view their activities. \u201d \u2600\ufe0f 10 Books to read: Peopleware Productive projects and Teams. Amazon. My Summary. Team Geek: A Software Developer\u2019s Guide to Working Well with Others. (Debugging Teams) Amazon. My Summary. High Output Management Getting Things Done: The Art of Stress-Free Productivity The 4-Hour Workweek: Escape 9-5, Live Anywhere, and Join the New Rich The 7 Habits of Highly Effective People: Powerful Lessons in Personal Change Conscious Business: How to Build Value Through Values Your Brain at Work Flow: The Psychology of Optimal Experience Succeed: How We Can Reach Our Goals Blogs: Recommended Blogs To Follow: http://www.theeffectiveengineer.com/ - The Effective Engineer is my personal blog, where I write about engineering habits, productivity tips, leadership, and culture. http://www.kalzumeus.com/ - Patrick McKenzie runs his own software business and has written many excellent long-form articles on career advice, consulting, SEO, and software sales. http://katemats.com/ - Kate Matsudaira, who has worked at large companies like Microsoft and Amazon as well as at startups, shares advice about tech, leadership, and life on her blog. http://randsinrepose.com/ - Michael Lopp has worked for many years in leadership positions at Netscape, Apple, Palantir, and Pinterest, and writes about tech life and engineering management. http://softwareleadweekly.com/ - Oren Ellenbogen curates a high-quality weekly newsletter on engineering leadership and culture. http://calnewport.com/ - Cal Newport, an assistant professor of computer science at Georgetown, focuses on evidence-based advice for building a successful and fulfilling life. http://www.joelonsoftware.com/ - Joel Spolsky, the co-founder of Stack Exchange, provides all sorts of programming pearls of wisdom on his blog. http://martinfowler.com/ - Martin Fowler, author of the book Refactoring, writes about how to maximize the productivity of software teams and provides detailed write-ups of common programming patterns. http://pgbovine.net/ - Philip Guo, a computer science professor, has written extensively and openly about his graduate school and work experiences.","title":"Effective Engineer - Notes"},{"location":"Books/The%20Effective%20Engineer/#effective-engineer-notes","text":"By Edmond Lau Highly Recommended :+1: http://www.theeffectiveengineer.com/","title":"Effective Engineer - Notes"},{"location":"Books/The%20Effective%20Engineer/#whats-an-effective-engineer","text":"They are the people who get things done. Effective Engineers produce results.","title":"What's an Effective Engineer?"},{"location":"Books/The%20Effective%20Engineer/#adopt-the-right-mindsets","text":"","title":"Adopt the Right Mindsets"},{"location":"Books/The%20Effective%20Engineer/#focus-on-high-leverage-activities","text":"Leverage = Impact Produced / Time Invested Use Leverage as Your Yardstick for Effectiveness 80% of the impact comes from 20% of the work. Focus on high leverage and not just easy wins.","title":"Focus on High Leverage Activities"},{"location":"Books/The%20Effective%20Engineer/#optimize-for-learning","text":"Change jobs if you have to. Optimizing for learning is high leverage. Adopt a growth mindset. Talk to people. Become good at telling stories. It gets better with time. Those with a growth mindset believe that they can cultivate and grow their intelligence and skills through effort. Own your story. Invest in the rate of learning Learning compounds. Compounding leads to exponential growth. Earlier the compounding starts, the better. Working on unchallenging tasks is a huge opportunity cost. You missed out on compounded learning. Prioritize learning over profitability. Invest your time in activities with the highest learning rate. Seek Work Environments Conducive to Learning Fast Growth: Companies where #problems >> #resources. Opportunity to choose high impact work. Make sure you are working on high priority projects. Openness: Look for culture with curiosity, where everyone is encouraged to ask questions. Fast Paced. People smarter than you. Autonomy: Freedom to choose what to work on. Smaller companies => More autonomy. While on Job Make a daily habit of acquiring new skills. Read code written by brilliant engineers. Jump fearlessly into code you don't know. Always be learning. Invest in skills that are in high demand. Read Books. Attend Conferences. Build and maintain strong relationships.","title":"Optimize for Learning"},{"location":"Books/The%20Effective%20Engineer/#prioritize-regularly","text":"Opportunity cost of working on wrong ideas can set back growth by years. Prioritize tasks based on ROI. Regular prioritization is high leverage activity. On TODO Lists: Maintain a 'single' todo lists where all tasks are listed. Don't try to remember stuff. Brain is bad at remembering. It's rather good at processing. Ask yourself regularly: Is this the most important thing I should be working on? Focus on what directly produces value. Learn to say no. Focus on the important and non-urgent. Find ways to get into flow. \u201cA state of effortless concentration so deep that they lose their sense of time, of themselves, of their problems.\u201d When possible, preserve larger blocks of focused time in your schedule. Limit the amount of Work in Progress. Cost of context switching is high. Prioritizing is difficult. Prioritization is high leverage. It has huge impact on your ability to get right things done.","title":"Prioritize Regularly"},{"location":"Books/The%20Effective%20Engineer/#invest-in-iteration-speed","text":"Continuous Deployment is high leverage. Will save a lot of time in manual deployment of code. They are the people who get things done. Effective Engineers produce results. Move fast to learn fast. Move fast and break things. Moving fast enables us to build more things and learn at faster rate. Invest in time saving tools. If you have to do something more than twice, write a tool the third time. Tools are multipliers that allow your to scale your impact beyond the confines of a day. Faster tools get used more often. Faster tools can enable new workflows that previously weren't possible. Productivity skyrockets with tools. Time saving property of tools also scale with team adoption. Shorten your debugging and validation Loops. Extra time spent in optimizing debugging workflow can help you fix annoying bugs with less headache. Debugging is hard. It's time consuming. Upfront investments to shorten debugging loops are worth it. High test coverage to reduce build and site breakages. Fast unit tests to encourage people to run them. Fast and incremental compiles and reloads to reduce development time. Master you programming environment. One editor. One high level language. Shell. Keyboard > Mouse. Automate manual workflows. Use interactive shell. Make running specific tests easy. Faster you can iterate, faster you can learn.","title":"Invest in Iteration Speed"},{"location":"Books/The%20Effective%20Engineer/#measure-what-you-want-to-improve","text":"Use metric to drive progress. If you can't measure it, you can't improve it. Good metric. Helps you focus on right things. Drives forward progress. Helps you guard against future regressions. Performance ratcheting : Any change should strictly improve the metric. Bad metric can lead to unwanted behavior. Examples:","title":"Measure what you want to Improve"},{"location":"Books/The%20Effective%20Engineer/#hours-worked-productivity","text":"click through rates < long click through rates. Metric you choose influences your decisions and behavior. Look for metric that, when optimized, maximizes impact for the team. Actionable metric - Whose movement can be casually explained by team's effort. Responsive metric - Updates quickly to give back feedback whether a given change was =ve or -ive. Choosing a metric is high leverage. Dedicate time to pick right metric. Instrument everything to understand what's going on. Measure anything, measure everything. Graphite, statsd. A single line of code lets you define a new counter or timer on the fly. Measuring goals you want to achieve is high leverage. Internalize useful numbers. Knowledge of useful numbers provide a valuable shortcut for knowing where to invest efforts to maximize gains. Need upfront work. Need not be accurate, ballpark idea suffices. Knowing useful numbers enables you to do back of the envelope calculations to quickly estimate the performance properties of a design without actually building it. Internalizing useful number help you spot anomalies. Be skeptical about data integrity. Log data liberally. Build tools to iterate on data accuracy sooner. Examine data sooner. When numbers look off, dig in to it sooner. :heavy_check_mark: Measure your progress. Carefully choose your top-level metric. Instrument your system. Know your numbers. Prioritize data integrity.","title":"hours worked &lt; productivity."},{"location":"Books/The%20Effective%20Engineer/#validate-your-ideas-early-and-often","text":"Not validating early leads to wasted efforts. Don't delay get feedback. Find low effort ways to validate work. Power of small batches. Helps you avoid making a big mistake by stopping the flow. Approach problem iteratively. No large implementations. Working solo? Be wary. Be extra vocal and get feedback.","title":"Validate your ideas early and often."},{"location":"Books/The%20Effective%20Engineer/#improve-project-estimation-skills","text":"Beware of mythical man month. Communication overhead is significant. Reduce risk early. Rewrite projects - almost always fail. Additional hours hurt productivity. Causes burnout. Do the riskiest task first. Allow buffer room for the unknown.","title":"Improve project estimation skills."},{"location":"Books/The%20Effective%20Engineer/#balance-quality-with-pragmatism","text":"High code quality. Code readability. Establish sustainable code review process. Code reviews help: Catch bugs and design problems early. Sharing working knowledge of the codebase. Increases long term agility. Easier to understand, quicker to modify.","title":"Balance Quality with Pragmatism"},{"location":"Books/The%20Effective%20Engineer/#manage-complexity-through-abstraction","text":"Example: MapReduce. Right abstractions make huge difference. \u201cPick the right ones, and programming will flow naturally from design; modules will have small and simple interfaces; and new functionality will more likely fit in without extensive reorganization,\u201d \u201cPick the wrong ones, and programming will be a series of nasty surprises: interfaces will become baroque and clumsy as they are forced to accommodate unanticipated interactions, and even the simplest of changes will be hard to make.\u201d The right abstraction can increase engineering productivity by an order of magnitude. Simple abstractions avoid interweaving multiple concepts, so that you can reason about them independently rather than being forced to consider them together. Designing good abstractions take work. An abstraction's usage and popularity provides a reasonable proxy for its quality.","title":"Manage complexity through Abstraction"},{"location":"Books/The%20Effective%20Engineer/#automate-testing","text":"Unit test cases and some integration testing provide a scalable way of managing growing codebase. A suite of extensive and automated tests can reduce overall error rates by validating the quality and by safeguarding against regressions. Tests also allow engineers to make changes, especially large refactorings, with significantly higher confidence. Despite its benefits, it can be difficult to foster a culture of automated testing. Focus on high leverage tests. Writing more tests, creating a virtuous feedback cycle and saving more development time.","title":"Automate Testing"},{"location":"Books/The%20Effective%20Engineer/#repay-technical-debt","text":"Technical debt refers to all the deferred work that\u2019s necessary to improve the health and quality of the codebase and that would slow us down if left unaddressed. Accumulating technical debt is fine as far as it is repaid within time. Refactor often.","title":"Repay Technical Debt"},{"location":"Books/The%20Effective%20Engineer/#reduce-operational-complexity","text":"Keep no. of technologies low. Don\u2019t sway towards shiny new technologies. Every additional technology you add is is guaranteed to go wrong eventually. Will need your time. Do the simple thing first. Embrace operational simplicity. The first solution that comes to mind is generally complex. Don't stop. Keep peeling off the layers of onion. Simplify the architecture to reduce their operational burden. \u201cWhat\u2019s the simplest solution that can get the job done while also reducing our future operational burden?\u201d Discipline to focus on simplicity is high leverage.","title":"Reduce Operational Complexity"},{"location":"Books/The%20Effective%20Engineer/#fail-fast","text":"Fail immediately and visibly. Doesn\u2019t necessarily mean crashing your programs for users. fail-fast to surface issues immediately. Failing fast is high leverage as it saves debugging time.","title":"Fail Fast"},{"location":"Books/The%20Effective%20Engineer/#relentlessly-automate","text":"Automating mechanics is good. Automating decision making - no. Hone your ability to respond and recover quickly. Leverage recovering quickly > Leverage preventing failures. \u201cscript for success,\u201d practice failure scenarios, and work on our ability to recover quickly. Make batch process idempotent Make processes retryable, i.e., not leaving any global state.","title":"Relentlessly Automate"},{"location":"Books/The%20Effective%20Engineer/#invest-in-your-teams-growth","text":"Invest in onboarding. The higher you climb up the engineering ladder, the more your effectiveness will be measured not by your individual contributions but by your impact on the people around you. \"You\u2019re a staff engineer if you\u2019re making a whole team better than it would be otherwise. You\u2019re a principal engineer if you\u2019re making the whole company better than it would be otherwise. And you\u2019re distinguished if you\u2019re improving the industry.\u201d \ufffc- Focus primarily on making everyone around you succeed. Your career depends on your team's success. Make hiring everyone's responsibility. Shared ownership of code. Keep bus factor more than one. Shared ownership removes isolated silos of information. Build collective wisdom through post mortems. Invest in automated testing. Automated test cases lead to higher confidence when refactoring. Write test cases when the code is fresh in mind. Don\u2019t be dogmatic about 100% code coverage. Value of tests increases over time and cost to write goes down. Hire the best. Surround yourself with great advisors \u2600\ufe0f : \u201cLeverage is the lens through which effective engineers view their activities. \u201d \u2600\ufe0f","title":"Invest in your team's Growth"},{"location":"Books/The%20Effective%20Engineer/#10-books-to-read","text":"Peopleware Productive projects and Teams. Amazon. My Summary. Team Geek: A Software Developer\u2019s Guide to Working Well with Others. (Debugging Teams) Amazon. My Summary. High Output Management Getting Things Done: The Art of Stress-Free Productivity The 4-Hour Workweek: Escape 9-5, Live Anywhere, and Join the New Rich The 7 Habits of Highly Effective People: Powerful Lessons in Personal Change Conscious Business: How to Build Value Through Values Your Brain at Work Flow: The Psychology of Optimal Experience Succeed: How We Can Reach Our Goals","title":"10 Books to read:"},{"location":"Books/The%20Effective%20Engineer/#blogs","text":"Recommended Blogs To Follow: http://www.theeffectiveengineer.com/ - The Effective Engineer is my personal blog, where I write about engineering habits, productivity tips, leadership, and culture. http://www.kalzumeus.com/ - Patrick McKenzie runs his own software business and has written many excellent long-form articles on career advice, consulting, SEO, and software sales. http://katemats.com/ - Kate Matsudaira, who has worked at large companies like Microsoft and Amazon as well as at startups, shares advice about tech, leadership, and life on her blog. http://randsinrepose.com/ - Michael Lopp has worked for many years in leadership positions at Netscape, Apple, Palantir, and Pinterest, and writes about tech life and engineering management. http://softwareleadweekly.com/ - Oren Ellenbogen curates a high-quality weekly newsletter on engineering leadership and culture. http://calnewport.com/ - Cal Newport, an assistant professor of computer science at Georgetown, focuses on evidence-based advice for building a successful and fulfilling life. http://www.joelonsoftware.com/ - Joel Spolsky, the co-founder of Stack Exchange, provides all sorts of programming pearls of wisdom on his blog. http://martinfowler.com/ - Martin Fowler, author of the book Refactoring, writes about how to maximize the productivity of software teams and provides detailed write-ups of common programming patterns. http://pgbovine.net/ - Philip Guo, a computer science professor, has written extensively and openly about his graduate school and work experiences.","title":"Blogs:"},{"location":"Books/Your%20Money%20Ratios/","text":"","title":"Your Money Ratios"},{"location":"Books/Your%20Money%20or%20Your%20Life/","text":"Step 1: Make Peace with your Past Add up all the money you\u2019ve earned in your life, then add up your net worth today. How much have you managed to hold onto? How much did you spend? For most people, this yields an unpleasant surprise.. but it\u2019s okay, for there is no sense beating yourself up over past mistakes. Step 2: Figure out your Real Earnings and Spending The idea here is that your real hourly wage is much lower than you think. You can figure it out as follows, and I\u2019ll even put in some plausible figures for a person with a $50,000 annual salary: Take your total monthly income after federal and state taxes: ($3500) Then subtract all work-related expenses (commuting, clothes, restaurant lunches, housekeepers, daycare,de-stressing activities etc) ($1500) Divide this by your total work time (including commuting, dressing up, clothes cleaning, unwinding time, etc.) (248 hours) The net result is that you take home a lot less than you think, and spend a lot more time doing it. In the example above, the $50k earner ends up bringing home only $8.06 for each hour spent in activities directly related to the job. Thus, when you decide to buy yourself an 8 dollar treat at Starbucks or at the pub, you\u2019ve really just burned off an entire hour of \u201clife energy\u201d which you\u2019ll never get back \u2013 you have to add that hour to the end of your work career to achieve financial independence. Tracking your spending is the easy part \u2013 the book recommends you use a notebook to handle everything, whereas I just do all of my spending by credit card, allowing it to be tracked automatically. The key, however, is you should know exactly what you buy each day, and why you decide to buy it. No more unconscious impulse shopping. 3: Create Monthly Reports for Yourself Keep a table of all income and all spending for each month, break it into categories, and convert the figures into \u201chours of life energy spent\u201d. Restaurant meals: 20 hours., etc. I find that the \u201cMint\u201d financial tool does an acceptable job of this for me, but the book recommends you do it in more detail. 4: Three Questions that will Supposedly Transform your Life: For each of the categories above, ask yourself: - Did I receive fulfillment in proportion to the hours of life energy spent? - Is this expenditure in alignment with my goals and life purpose? - How might this expenditure change if I didn\u2019t have to work for a living? (more, less, same) 5: Keep a prominent (i.e. right on your kitchen wall) graph of income and expenses You keep doing this for multiple months which will grow into multiple years. The authors report that most people start to see their income grow even as their expenses shrink, since they are now learning to spend more consciously. Although I don\u2019t have anything on my kitchen wall, we do maintain a history of spreadsheet versions and graphs of savings that dates back several years. But if you are a beginner who still wrangles with optional luxury purchases while still in debt, the kitchen wall is a good idea. 6: Learn to Value your Life Energy by Minimizing Spending This is the meat of anyone\u2019s financial independence \u2013 learning to spend your money efficiently on the things you do get true fulfillment from, and not spend it all on the things you don\u2019t. The book presents 101 tips, most of which have been covered here on this blog at various times. 7: Maximize your Earnings Adopt a positive attitude about your work and appreciate the earnings as a tool which gets you to financial independence.. rather than feeling like a victim of outside forces like the economy or a recession. Seek to earn more, and don\u2019t be limited to work only in your current field \u2013 after all, you\u2019ll be retiring soon anyway, meaning every activity will soon be open to you whether paid or unpaid. 8: Watch for the Crossover Point This is when your passive income from investments equals your expenses. When you reach that point \u2013 DingDing! \u2013 you are Financially Independent. However, the authors define this as \u201cMonthly Income = Capital x Current long-term interest rate/12 months\u201d, since they like government bonds as their retirement income vehicle, which currently pay approximately zero after adjusting for inflation. But Mustachians of course have other options, discussed below. 9: Managing your Money \u201cBecome knowledgeable and invest your capital in such a way as to provide an absolutely safe income sufficient to meet your basic needs for life\u201d Here\u2019s where one of the most significant differences pops up between YMOYL and MMM (and other modern takes on financial independence). In the early 1980s, you could buy 30-year government bonds with a nominal yield of over 12%. Even in the surrounding time periods, yields were well over 7%. The YM authors liked the guaranteed return and decided to use these bonds as a complete income source*. Due to our continued hangover from the financial crisis, the latest figure for the 30-year bonds is about 2.9%. While it is still possible to retire on bonds, I consider an over-50% reduction in investment returns in exchange for \u201csafety\u201d to be too high a price to pay. Safety is just an expensive illusion anyway. So instead of bonds, we focus here on stocks, dividends, owning rental real estate (or its passive cousin REITs ), and even a bit of wacky new higher risk/return stuff like peer-to-peer lending . And on top of that, I don\u2019t consider \u201cretirement\u201d to mean \u201cnever accepting money for things you do\u201d, so I allow you to do fun things that happen to generate money in retirement as well. Your Money or Your Life is a wise book, and the authors were clearly motivated by what they saw was a pointless death march of society. Workworkwork, Buybuybuy, TrashDestroyWaste, Die. Even 20 years ago, when the first clunky SUVs were coming to market and trailblazing a path to widespread stupidity, this pattern was already obvious. And Joe and Vicki were wise to it, trying to guide society away from its wasteful ways and vividly aware that our consumption is an ongoing trainwreck of environmental destruction. The bad news is that we went through some pretty shitty decades since then, when measured by the spread of the very consumer disease the book was fighting against. Cars turned into personal trucks, commutes grew, suburbs sprawled, and China joined the party, building a communist copy of the Great American Smokestack, flooding their own country with asphalt and ours with cheap manufactured goods. Americans kept working more so they could borrow more and buy more, we grew much fatter and less happy, and generally continue to live our lives in the most blind and inefficient way possible on average. The good news is, the Internet happened. Of course, it spawned an acceleration of technological progress, giving us things like remote working and energy-efficient products. But technology can\u2019t save the world by itself \u2013 in the wrong hands, it just allows us to consume more efficiently, which means consuming more. It\u2019s a good tool, but it\u2019s not enough. The good news comes from the free exchange of ideas. Only now can the ideas of the non-wealthy majority compete equally with the billion-dollar budgets of crusty old companies seeking to prolong over-consumption. Nowadays, even an untrained individual can sit on the couch and type some shit into the computer, and it can reach a wider audience than a successful book might have in the past. So imagine what a big group of people could accomplish, some of them with influence over companies and governments, if they all started grooving on the right message.","title":"Your Money or Your Life"},{"location":"Coding/Setting%20Up%20Mac%20for%20Coding/","text":"Mac Setup Check you're admin Spotlight >> Users & Groups >> Password = Check Allow user to admin this computer Run following on Terminal sudo plutil -p /var/db/dslocal/nodes/Default/users/root.plist | grep -A 2 passwd Below output means root user is not enabled. ```sh \"passwd\" => [ 0 => \"*\" ] ``` Below output means root user is enabled. sh \"passwd\" => [ 0 => \"********\" ] To enable root user, Spotlight >> Directory Utility = Click on the lock at the bottom to unlock it. Edit menu >> Enable Root User Customize Mac Finder - Show Finder path in Status bar: View \u00bb Show Path Bar - Drag and drop your favourite folders into the left-side Favorites bar e.g. Macintosh HD, Repos. - Show hidden files and folders using Terminal commands: ```sh defaults write com.apple.finder AppleShowAllFiles YES Killall Finder // Then, restart the Finder by holding down Option+Control and clicking the Finder icon in the Dock, then choose Relaunch ``` Trackpad Spotlight >> Trackpad >> Point & Click = Check Tap to Click Spotlight >> Trackpad >> Point & Click = Un-check Force Click and Haptic Feedback Spotlight >> Trackpad >> Point & Click = Increase Tracking Speed Keyboard Spotlight >> Keyboard >> Keyboard = Check Use F1,F2 keys as standard keys Spotlight >> Keyboard >> Shortcuts = Double click Show Desktop and hit Cmd+D Desktop Spotlight >> Desktop & Screensavers >> Screen Saver = Check 'Show with clock' Spotlight >> Desktop & Screensavers >> Screen Saver => Hot Corners Left Bottom = Desktop Right Bottom = Screen Saver Locking - Spotlight >> Keychain Access >> Preferences = Check 'Show keychain status in menu bar'. Screen Saver - From Finder >> Go To >> /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ (Sierra) - Drag and Drop ScreenSaveEngine app on Dock. - High Sierra = /System/Library/CoreServices/ Development Tools & Settings VS Code iTerm2 Sublime SnagIt Spectacle Date-O Mac Tips Start-up Programs Spotlight >> Users & Groups >> Login Items = Add apps Productivity Tips Command Purpose CMD+Ctrl+F Full Screen Spotlight Find app, use as calculator, dictionary File delete Backspace delete Back Delete del Forward delete fn del Capture Screen CMD+SHIFT+4 Move Up/Down the Folders CMD + Up/Down CMD Full CMD Full","title":"Setting Up Mac for Coding"},{"location":"Coding/Setting%20Up%20Mac%20for%20Coding/#mac-setup","text":"Check you're admin Spotlight >> Users & Groups >> Password = Check Allow user to admin this computer Run following on Terminal sudo plutil -p /var/db/dslocal/nodes/Default/users/root.plist | grep -A 2 passwd Below output means root user is not enabled. ```sh \"passwd\" => [ 0 => \"*\" ] ``` Below output means root user is enabled. sh \"passwd\" => [ 0 => \"********\" ] To enable root user, Spotlight >> Directory Utility = Click on the lock at the bottom to unlock it. Edit menu >> Enable Root User Customize Mac Finder - Show Finder path in Status bar: View \u00bb Show Path Bar - Drag and drop your favourite folders into the left-side Favorites bar e.g. Macintosh HD, Repos. - Show hidden files and folders using Terminal commands: ```sh defaults write com.apple.finder AppleShowAllFiles YES Killall Finder // Then, restart the Finder by holding down Option+Control and clicking the Finder icon in the Dock, then choose Relaunch ``` Trackpad Spotlight >> Trackpad >> Point & Click = Check Tap to Click Spotlight >> Trackpad >> Point & Click = Un-check Force Click and Haptic Feedback Spotlight >> Trackpad >> Point & Click = Increase Tracking Speed Keyboard Spotlight >> Keyboard >> Keyboard = Check Use F1,F2 keys as standard keys Spotlight >> Keyboard >> Shortcuts = Double click Show Desktop and hit Cmd+D Desktop Spotlight >> Desktop & Screensavers >> Screen Saver = Check 'Show with clock' Spotlight >> Desktop & Screensavers >> Screen Saver => Hot Corners Left Bottom = Desktop Right Bottom = Screen Saver Locking - Spotlight >> Keychain Access >> Preferences = Check 'Show keychain status in menu bar'. Screen Saver - From Finder >> Go To >> /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ (Sierra) - Drag and Drop ScreenSaveEngine app on Dock. - High Sierra = /System/Library/CoreServices/ Development Tools & Settings VS Code iTerm2 Sublime SnagIt Spectacle Date-O","title":"Mac Setup"},{"location":"Coding/Setting%20Up%20Mac%20for%20Coding/#mac-tips","text":"Start-up Programs Spotlight >> Users & Groups >> Login Items = Add apps Productivity Tips Command Purpose CMD+Ctrl+F Full Screen Spotlight Find app, use as calculator, dictionary File delete Backspace delete Back Delete del Forward delete fn del Capture Screen CMD+SHIFT+4 Move Up/Down the Folders CMD + Up/Down CMD Full CMD Full","title":"Mac Tips"},{"location":"Coding/Setting%20Up%20the%20Terminal/","text":"Pre-requisites iTerm2 Visual Studio Code brew : /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Install \"Oh My Zsh\" sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" Install theme Powerlevel10k git clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k code ~/.zshrc ZSH_THEME=\"powerlevel10k/powerlevel10k\" Then save the zshrc file, quit the iTerm2, and re-open it. You will see the Powerlevel10k configuration wizard. You can run the wizard later with the below command on iTerm. pk10 configure Syntax highlighting. brew install zsh-syntax-highlighting source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh","title":"Setting Up the Terminal"},{"location":"Coding/Setting%20Up%20the%20Terminal/#pre-requisites","text":"iTerm2 Visual Studio Code brew : /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Install \"Oh My Zsh\" sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" Install theme Powerlevel10k git clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k code ~/.zshrc ZSH_THEME=\"powerlevel10k/powerlevel10k\" Then save the zshrc file, quit the iTerm2, and re-open it. You will see the Powerlevel10k configuration wizard. You can run the wizard later with the below command on iTerm. pk10 configure Syntax highlighting. brew install zsh-syntax-highlighting source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh","title":"Pre-requisites"},{"location":"Personal%20Finance/Home%20Buying/","text":"Terms EMI = Estimated Monthly Installment PMI = Private Mortgage Insurance (if downpayment < 20%) usually ~0.5% HOA = Housing Association, if you buy a house in a community. Downpayment = The % of the total cost. If it's <20%, the buyer needs to pay PMI. Earnest Money Deposit = If buyer is serious and makes an offer, the seller takes his property off the market and demands to pay the earnest money. The Purchase Agreement is prepared with details on the total earnest money deposit and its payment schedule e.g. 5% of the $600k to be paid over 3 installments. If the deal falls through (unforeseen event, loan rejection), the seller may keep the deposit. If the deal goes through, the deposit is counted towards downpayment and/or closing cost. Closing Cost = Loan Cost (origination charges + services borrower shop/did not shop) + Other Cost (tax + fees + initial escrow payment + other) Calculators https://better.com/loan-comparison-calculator Before Buying How much you can afford? EMI = Principle + Interest + PMI + Property Tax + HOA Your EMI should be < 25% of your Monthly Gross Income. (EMIx100)/Gross = ? Monthly Income = Post-tax income - (Home EMI + Car EMI + Grocery + Bills) Mortgage Types Conventional FHA VA 15/30 year Federal Housing Veterans Downpayment 3.5% downpayment No Downpayment PMI if Downpayment < 20% ? No PMI Factors Impacting your mortgage rate Credit Score (Debt/Income ratio, On-time credit payment) Mortgage Rate Types fixed-rate 30/15 year conventional adjustable-rate (ARM) - quoted as fixed-period/adjustable-frequency e.g. 5/6 means interest rate is fixed for first 5 years and may change every 6-months until it is paid off. Risky Loan Balloon Payment - if the loan demands huge payment at the end of the loan term. Prepayment Penalty if you refinance or pay off your loan. Prepayment up to 20% of the balance is usually allowed. Points or Credits 1 point is 1% so 1 point of $100k is $1000 zero-point loan - The lender takes or gives no point. When lender offers some points, it can be used against the closing cost. Sometimes the seller asks to use their preferred lender and doing so, offers some credit in closing cost. If you're planning to stay for longer time, prefer lower interest rate over the credits/points. If you're planning to refinance or resell the house soon, get the credits/points now! Talking to the Salesman/Seller - What are the incentives of using your preferred lender?","title":"Home Buying"},{"location":"Personal%20Finance/Home%20Buying/#terms","text":"EMI = Estimated Monthly Installment PMI = Private Mortgage Insurance (if downpayment < 20%) usually ~0.5% HOA = Housing Association, if you buy a house in a community. Downpayment = The % of the total cost. If it's <20%, the buyer needs to pay PMI. Earnest Money Deposit = If buyer is serious and makes an offer, the seller takes his property off the market and demands to pay the earnest money. The Purchase Agreement is prepared with details on the total earnest money deposit and its payment schedule e.g. 5% of the $600k to be paid over 3 installments. If the deal falls through (unforeseen event, loan rejection), the seller may keep the deposit. If the deal goes through, the deposit is counted towards downpayment and/or closing cost. Closing Cost = Loan Cost (origination charges + services borrower shop/did not shop) + Other Cost (tax + fees + initial escrow payment + other)","title":"Terms"},{"location":"Personal%20Finance/Home%20Buying/#calculators","text":"https://better.com/loan-comparison-calculator","title":"Calculators"},{"location":"Personal%20Finance/Home%20Buying/#before-buying","text":"How much you can afford? EMI = Principle + Interest + PMI + Property Tax + HOA Your EMI should be < 25% of your Monthly Gross Income. (EMIx100)/Gross = ? Monthly Income = Post-tax income - (Home EMI + Car EMI + Grocery + Bills)","title":"Before Buying"},{"location":"Personal%20Finance/Home%20Buying/#mortgage-types","text":"Conventional FHA VA 15/30 year Federal Housing Veterans Downpayment 3.5% downpayment No Downpayment PMI if Downpayment < 20% ? No PMI","title":"Mortgage Types"},{"location":"Personal%20Finance/Home%20Buying/#factors-impacting-your-mortgage-rate","text":"Credit Score (Debt/Income ratio, On-time credit payment)","title":"Factors Impacting your mortgage rate"},{"location":"Personal%20Finance/Home%20Buying/#mortgage-rate-types","text":"fixed-rate 30/15 year conventional adjustable-rate (ARM) - quoted as fixed-period/adjustable-frequency e.g. 5/6 means interest rate is fixed for first 5 years and may change every 6-months until it is paid off.","title":"Mortgage Rate Types"},{"location":"Personal%20Finance/Home%20Buying/#risky-loan","text":"Balloon Payment - if the loan demands huge payment at the end of the loan term. Prepayment Penalty if you refinance or pay off your loan. Prepayment up to 20% of the balance is usually allowed.","title":"Risky Loan"},{"location":"Personal%20Finance/Home%20Buying/#points-or-credits","text":"1 point is 1% so 1 point of $100k is $1000 zero-point loan - The lender takes or gives no point. When lender offers some points, it can be used against the closing cost. Sometimes the seller asks to use their preferred lender and doing so, offers some credit in closing cost. If you're planning to stay for longer time, prefer lower interest rate over the credits/points. If you're planning to refinance or resell the house soon, get the credits/points now!","title":"Points or Credits"},{"location":"Personal%20Finance/Home%20Buying/#talking-to-the-salesmanseller","text":"","title":"Talking to the Salesman/Seller"},{"location":"Personal%20Finance/Home%20Buying/#-what-are-the-incentives-of-using-your-preferred-lender","text":"","title":"- What are the incentives of using your preferred lender?"}]}